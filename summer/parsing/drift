
























f = string "rfc"
f :: Parsec String b String
f = string "re"
ref = do
  n <- norm
  sep
  Digits s y <- z
  pure (Reference n s y)
p = parseTest ref

this folder was called `normattiva`
i want to turn it into a resource about parsing

*Main> parseTest (many1 (string "a" >> notFollowedBy (string "ab"))>> string "ab") $ "aaaab"
parse error at (line 1, column 6):
unexpected "ab"

*Main> parseTest (many1 (string "a") >> string "ab") $ "ab"

it's not clear which parsers consume input

["do re mi fa do re mi fa"]
["do", RE, "mi fa do", RE, "mi fa"]

f "decreto legislativo n. 97 del 2016"
:decreto.legislativo:2016;97

f "legge 7 agosto 2015, n. 124"
:legge:2015-08-07;124

f "legge n.241/1990"
:legge:1990;241

f "d. lgs. n. 33/2013"
:decreto.legislativo:2013;33

f "decreto legislativo 30 marzo 2001 n.165."

and choosing to annotate at the highest level
fixed a crazy amount of type errors by thinking

how to bail stack compilation at the first type error?

trying with a more flexible token approach

serial <|> year <|> norm <|> sep

la n può essere una lettera, separatore
n. 34 


try

p = do
  not p1
  v <- p1
  not p2
  v <- p2
  ...

i want to learn how to parse in between other stuff

so sep is consuming the digits

you will be happy to get to those you had postponed
find a way to spread the answers over time
just too many questions
and later one can face some of those type errors with calm
in time of pressure, accept your limits
get one plumbing right and work within it until the job is done
succeed, fail, consume input, don't consume input
a complex library with complex types

http://hackage.haskell.org/package/parsec-3.1.13.0/docs/Text-Parsec-Char.html#v:char
http://hackage.haskell.org/package/parsec-3.1.13.0/docs/Text-Parsec-Combinator.html#v:many1

http://jakewheat.github.io/intro_to_parsing/

https://two-wrongs.com/parser-combinators-parsing-for-haskell-beginners

http://hackage.haskell.org/package/parsec-3.1.13.0/docs/Text-Parsec.html
http://hackage.haskell.org/package/parsec
http://hackage.haskell.org/package/parsec-3.1.13.0/docs/doc-index-I.html
https://wiki.haskell.org/Parsec#Docs

data Norm = Legge | DecretoLegislativo

data Reference = { norm :: Norm, serial :: Int, year :: Int }

http://foia-circolare2.readthedocs.io/it/latest/

normattiva-link

@guest.occhi_franco Partendo da questo documento http://foia-circolare2.readthedocs.io/it/latest/ sarebbe possibile, con pandoc (creando un filtro), creare un link ai riferimenti normativi automaticamente ? cc @alberto  Grrazie

con un po’ di euristiche e un po’ di test che piano piano aumentiamo; e poi serve un sistema per trovare i target di quei link (su normattiva principalmente)
normattiva ha questa funzionalità; quando clicchi su “attiva riferimenti normativa”, ti attiva tutti i link
tra l’altro usano una euristica anche loro e infatti non becccano i typo. Se guardi qui: http://www.normattiva.it/atto/caricaDettaglioAtto?atto.dataPubblicazioneGazzetta=2013-04-05&atto.codiceRedazionale=13G00076&queryString=%3FmeseProvvedimento%3D%26formType%3Dricerca_semplice%26numeroArticolo%3D%26numeroProvvedimento%3D33%26testo%3D%26annoProvvedimento%3D2013%26giornoProvvedimento%3D&currentPage=1
vedrai che il quarto visto non ha il link attivo anche se attivi i riferimenti, perché c’è un typo (`giungo` invece che `giugno`)
così come il primo visto è un riferimento alla Costituzione che non è stato trovato (mentre altri riferimenti alla costituzione sì, tipo se guardi proprio l’ultima frase è un link alla costituzione)
