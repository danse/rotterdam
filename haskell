

view (ls "/tmp")
print
.
using file functions from System.Posix and System.Directory in order
to have string file paths
 turtle

stack repl --package turtle

https://wiki.haskell.org/How_to_write_a_Haskell_program
https://wiki.haskell.org/Hierarchical_module_names
https://www.haskell.org/cabal/users-guide/developing-packages.html#pkg-field-build-tool-depends
https://www.haskell.org/cabal/users-guide/developing-packages.html#package-descriptions
https://www.haskell.org/cabal/users-guide
https://www.haskell.org/cabal

newtype Work = W String
type FirstName = String

pvp.haskell.org

(

main :: IO ()
main = getArgs >>= \case
  [] -> error "usage: FILE OPTIONS"
src:opts -> pandoc src $ PandocOpts $ map T.pack opts

from https://github.com/Hogeyama/pandoc-wrapper/blob/master/Main.hs

)

PatternGuards
https://wiki.haskell.org/Pattern_guard

stack build --ghc-options=-O0

stack repl --only-main

modify r f = r{ field =  f (field r) }

-XNamedFieldPuns
f (C {a}) = a
https://downloads.haskell.org/~ghc/6.12.1/docs/html/users_guide/syntax-extns.html#record-puns

data Tree a = Leaf a | Branch [Tree a]

combine :: Inline -> Inl ()
combine i = do
  outer <- gets stOuter
  case (outer, i) of
    (Link _ _ _, _)    -> collapse i
    (Strong _, Emph _) -> collapse i
    (Emph _, Strong _) -> emerge i
    (_, Link _ _ _)    -> emerge i
    (_, _)             -> collapse i

{-# LANGUAGE OverloadedStrings, DeriveDataTypeable #-}

class Functor f => Applicative f where
  pure  :: a -> f a
  infixl 4 <*>
  (<*>) :: f (a -> b) -> f a -> f b

instance Monoid [a] where
        mempty  = []

f a =
  let b = a * 2
  in b + a

guarded something
  | condition something = result
  | otherwise           = somethingElse


-- in the following case, the indentation provided by `haskell-mode`
-- will be uglier
ifMonadic = do
  somethingMonadic
  if somethingIf
    then
      do
        somethingThen
    else
      do
        somethingElse

-- `Single` and `Multiple` are data constructors. They are necessary
data Argument = Single Int | Multiple [Int]
